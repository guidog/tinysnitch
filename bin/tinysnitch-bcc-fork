#!/usr/bin/python2
#
# source: https://github.com/iovisor/bcc
#
from __future__ import print_function
import ctypes as ct
import sys
from bcc import BPF
from bcc.utils import printb

class Data(ct.Structure):
    _TASK_COMM_LEN = 16
    _pack_ = 1
    _fields_ = [
        ("pid", ct.c_uint),
        ("child_pid", ct.c_uint),
    ]

def initialize(arg_list = sys.argv[1:]):
    return BPF(text="""
    #include <linux/sched.h>
    struct data_t {
        u32 pid;
        u32 child_pid;
    } __attribute__((packed));
    BPF_PERF_OUTPUT(events);
    TRACEPOINT_PROBE(sched, sched_process_fork) {
        struct task_struct *task = (typeof(task))bpf_get_current_task();
        struct data_t data = {
            .pid = task->tgid,
            .child_pid = args->child_pid,
        };
        events.perf_submit(args, &data, sizeof(data));
        return 0;
    }""")

def callback(cpu, data, size):
    val = ct.cast(data, ct.POINTER(Data)).contents
    printb(b'%d %d' % (val.pid, val.child_pid))

bpf = initialize()
bpf["events"].open_perf_buffer(callback)
while True:
    bpf.perf_buffer_poll()
