#!/usr/bin/env python3
import os
import sys
from PyQt5.QtGui import QColor
from PyQt5 import QtWidgets
from PyQt5 import QtCore
import argh

durations = 'once', '1-minute', '3-minutes', '9-minutes', 'until-quit', 'forever'
scopes = 'port-domain', 'domain'
granularities = 'just-path', 'args-and-path'
actions = 'yes', 'no'

class MainWindow(QtWidgets.QMainWindow):
    def qt_setup(self):
        QtWidgets.QMainWindow.__init__(self)
        centralWidget = QtWidgets.QWidget(self)
        self.setCentralWidget(centralWidget)
        gridLayout = QtWidgets.QGridLayout(self)
        centralWidget.setLayout(gridLayout)
        palette = self.palette()
        palette.setColor(self.backgroundRole(), QColor(20, 20, 20))
        self.setPalette(palette)
        self.setStyleSheet("QLabel { font: %spt Mono; color: rgb(200,200,200); }" % os.environ.get('TINYSNITCH_FONTSIZE', '16'))
        self.title = QtWidgets.QLabel('', self)
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        gridLayout.addWidget(self.title, 0, 0)

    def __init__(self, words):
        self.qt_setup()
        self.duration = '9-minute'
        self.granularity = 'args-and-path'
        self.scope = 'port-domain'
        self.action = 'no'
        self.help = self.legend = False
        self.text = ' '.join(words).replace('<', '&lt;').replace('>', '&gt;').split('|')
        self.seconds = 60
        self.timer = QtCore.QTimer()
        self.timer.setInterval(1000)
        self.timer.timeout.connect(self.tick)
        self.timer.start()
        self.update()

    def tick(self):
        self.seconds -= 1
        if self.seconds == 0:
            self.exit()
        self.update()

    def keyPressEvent(self, event, **kw):
        key = event.key()
        if self.help or self.legend:
            self.help = self.legend = False
            self.update()
        else:
            if key == 89: # y
                self.action = 'yes'
                self.exit()
            elif key == 78: # n
                self.action = 'no'
                self.exit()
            elif key == 68: # d
                self.scope = 'domain'
            elif key == 80: # p
                self.scope = 'port-domain'
            elif key == 79: # o
                self.duration = 'once'
            elif key == 49: # 1
                self.duration = '1-minute'
            elif key == 51: # 3
                self.duration = '3-minutes'
            elif key == 57: # 9
                self.duration = '9-minutes'
            elif key == 85: # u
                self.duration = 'until-quit'
            elif key == 70: # f
                self.duration = 'forever'
            elif key == 72: # h
                self.help = True
            elif key == 65: # a
                self.granularity = 'args-and-path'
            elif key == 74: # j
                self.granularity = 'just-path'
            elif key == 76: # l
                self.legend = True
        self.update()

    def update(self):
        if self.help:
            self.title.setText('<p style="line-height: 50px;"><span style="font-weight: bold;">actions</span><br/>(y)es<br/>(n)o<br/><br/><span style="font-weight: bold;">scope</span><br/>(d)omain<br/>(p)ort-domain<br/><br/><span style="font-weight: bold;">granularity</span><br/>(a)rgs-and-path<br/>(j)ust-path<br/><br/><span style="font-weight: bold;">duration</span><br/>(o)nce<br/>(1)minute<br/>(3)minutes<br/>(9)minutes<br/>(u)ntil-quit<br/>(f)orever</p>') # noqa
        elif self.legend:
            text = '\n\n'.join(['protocol', ' '.join(['src:port', '->', 'dst:port']), ' '.join(['pid', 'program']), 'args'])
            self.title.setText(f'<span/>{text}\n\n{"-" * 250}\n\nduration scope granularity\n\n(y)es (n)o (h)elp (l)egend\n\n{"-" * 250}\n\n{self.seconds} seconds until DENY'.replace('\n', '<br/>'))
        else:
            yellow = lambda x: '-' if x == '-' else f'<span style="color: rgb(220, 220, 0);">[{x}]</span>'
            proto, target, pid, args = self.text
            src, arrow, dst = target.split()
            if proto.strip().endswith('-src'):
                a, b = src.split(':')
                src = f'{yellow(a)}:{b}'
                if self.scope != 'domain':
                    a, b = dst.split(':')
                    dst = f'{a}:{yellow(b)}'
            else:
                if self.scope == 'domain':
                    a, b = dst.split(':')
                    dst = f'{yellow(a)}:{b}'
                else:
                    dst = yellow(dst)
            pid, path = pid.split()
            path = yellow(path)
            if self.granularity == 'args-and-path':
                args = yellow(args.strip())
            text = [proto, ' '.join([src, arrow, dst]), ' '.join([pid, path]), args]
            text = '\n\n'.join(text)
            self.title.setText(f'<span/>{text}\n\n{"-" * 250}\n\n{self.duration} {self.scope} {self.granularity}\n\n(y)es (n)o (h)elp (l)egend\n\n{"-" * 250}\n\n{self.seconds} seconds until DENY'.replace('\n', '<br/>'))

    def exit(self):
        self.update()
        self.action = {'yes': 'allow', 'no': 'deny'}[self.action]
        print(f'{self.duration} {self.scope} {self.action} {self.granularity}')
        sys.exit(0)

@argh.dispatch_command
def main(*words):
    app = QtWidgets.QApplication(sys.argv)
    win = MainWindow(words)
    win.show()
    app.exec_()
