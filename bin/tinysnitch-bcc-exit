#!/usr/bin/python2
#
# source: https://github.com/iovisor/bcc
#
from __future__ import print_function
from bcc.utils import printb
import ctypes as ct
from bcc import BPF

class Data(ct.Structure):
    _TASK_COMM_LEN = 16
    _pack_ = 1
    _fields_ = [("pid", ct.c_uint)]

def callback(cpu, data, size):
    printb(b'%d' % ct.cast(data, ct.POINTER(Data)).contents.pid)

bpf = BPF(text="""
    #include <linux/sched.h>
    struct data_t {
        u32 pid;
    } __attribute__((packed));
    BPF_PERF_OUTPUT(events);
    TRACEPOINT_PROBE(sched, sched_process_exit) {
        struct task_struct *task = (typeof(task))bpf_get_current_task();
        struct data_t data = {
            .pid = task->tgid,
        };
        events.perf_submit(args, &data, sizeof(data));
        return 0;
    }
""")

bpf["events"].open_perf_buffer(callback)

while True:
    bpf.perf_buffer_poll()
